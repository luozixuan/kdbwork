/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package btmu.efx.processors.kdb;

import java.io.EOFException;
import java.io.IOException;
import java.io.OutputStream;
import java.nio.charset.Charset;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.concurrent.atomic.AtomicLong;

import org.apache.nifi.annotation.behavior.EventDriven;
import org.apache.nifi.annotation.behavior.InputRequirement;
import org.apache.nifi.annotation.behavior.InputRequirement.Requirement;
import org.apache.nifi.annotation.documentation.CapabilityDescription;
import org.apache.nifi.annotation.documentation.Tags;
import org.apache.nifi.annotation.lifecycle.OnScheduled;
import org.apache.nifi.annotation.lifecycle.OnShutdown;
import org.apache.nifi.annotation.lifecycle.OnStopped;
import org.apache.nifi.annotation.lifecycle.OnUnscheduled;
import org.apache.nifi.components.PropertyDescriptor;
import org.apache.nifi.flowfile.FlowFile;
import org.apache.nifi.flowfile.attributes.CoreAttributes;
import org.apache.nifi.logging.ComponentLog;
import org.apache.nifi.processor.ProcessContext;
import org.apache.nifi.processor.ProcessSession;
import org.apache.nifi.processor.Relationship;
import org.apache.nifi.processor.exception.ProcessException;
import org.apache.nifi.processor.io.OutputStreamCallback;
import org.apache.nifi.processor.util.StandardValidators;

import com.exxeleron.qjava.QBasicConnection;
import com.exxeleron.qjava.QCallbackConnection;
import com.exxeleron.qjava.QDateTime;
import com.exxeleron.qjava.QErrorMessage;
import com.exxeleron.qjava.QException;
import com.exxeleron.qjava.QMessage;
import com.exxeleron.qjava.QMessagesListener;
import com.exxeleron.qjava.QTable;
import com.exxeleron.qjava.QTimespan;
import com.exxeleron.qjava.QTimestamp;

@EventDriven
@Tags({"kdb","subsribe"})
@InputRequirement(Requirement.INPUT_ALLOWED)
@CapabilityDescription("Subsribe to KDB specific port. "
        + " "
        + " "
)

public class SubKDBProcessor  extends AbstractKDBProcessor {
    public static final String SUB_TICKER = ".u.sub";
    public static final String RESULT_ROW_COUNT = "tabrow.count";
    public static final PropertyDescriptor TABLE_NAME = new PropertyDescriptor.Builder()
    .name("table name")
    .description("The table's name to subcribe data")
    .addValidator(StandardValidators.NON_EMPTY_VALIDATOR)
    .required(true)
    .build();
    
    static final Relationship REL_SUCCESS = new Relationship.Builder().name("success")
            .description("All well received KDB messagess is routed here").build();
    
    private final static List<PropertyDescriptor> propertyDescriptors;
    private final static Set<Relationship> relationships;
    
    public static final String CONTEXT_ATTRIBUTE_SESSION_FACTORY_HOLDER = "sessionFactoryHolder";
    public static final String CONTEXT_ATTRIBUTE_PROCESS_CONTEXT_HOLDER = "processContextHolder";
    public static final String CONTEXT_ATTRIBUTE_FLOWFILE_MAP = "flowFileMap";
    public static final String CONTEXT_ATTRIBUTE_STREAM_THROTTLER = "streamThrottler";
    
    
    static {
        List<PropertyDescriptor> _propertyDescriptors = new ArrayList<>();
        _propertyDescriptors.addAll(descriptors);
        _propertyDescriptors.add(TABLE_NAME);
        propertyDescriptors = Collections.unmodifiableList(_propertyDescriptors);
        Set<Relationship> _relationships = new HashSet<>();
        _relationships.add(REL_SUCCESS);
        relationships = Collections.unmodifiableSet(_relationships);
    }

    @Override
    public Set<Relationship> getRelationships() {
        return relationships;
    }

    @Override
    public final List<PropertyDescriptor> getSupportedPropertyDescriptors() {
        return propertyDescriptors;
    }

    

    @OnScheduled
    public void onScheduled(final ProcessContext context) {

    }
    
    @OnUnscheduled
    public void stop() {
        super.stop();
    }
    
    @OnShutdown
    public void shutdown() {
        super.stop();
    }

    @OnStopped
    public void terminate() {
        super.stop();
    }
    
    
    public void onTrigger(final ProcessContext context, final ProcessSession session) throws ProcessException {
        

        
        
/*        if (context.hasIncomingConnection()) {
            flowFile = session.get();
            // If we have no FlowFile, and all incoming connections are self-loops then we can continue on.
            // However, if we have no FlowFile and we have connections coming from other Processors, then
            // we know that we should run only if we have a FlowFile.
            if (flowFile == null && context.hasNonLoopConnection()) {
                return;
            }
        }*/

        final ComponentLog logger = getLogger();
        if(!isRemoteFeederNotAlive(callbackCon,logger,context)){
            try{
                logger.info("-------DEBUG000");
                final Charset charset = Charset.forName(context.getProperty(CHARSET).getValue());
                callbackCon = openCallBackConnection(context);
                logger.info("-------DEBUG001");
                String tabName = context.getProperty(TABLE_NAME).getValue();
                final AtomicLong nrOfRows = new AtomicLong(0L);
                final QMessagesListener listener = new QMessagesListener() {
                    
                    public void messageReceived( final QMessage message ) {
                        FlowFile flowFile = null;
                        final Object data = message.getData();
                        if ( data instanceof Object[] ) {
                            // unpack upd message
                            final Object[] params = ((Object[]) data);
                            
                            if ( params.length == 3 && params[0].equals("upd") && params[2] instanceof QTable ) {
                                final QTable table = (QTable) params[2]; 
                                if (flowFile == null) {
                                    
                                    flowFile = session.create();
                                }
                                //Convert to Json and output
                                flowFile = session.write(flowFile, new OutputStreamCallback() {
                                    @Override
                                    public void process(final OutputStream out) throws IOException {
                                        try {                                            
                                            nrOfRows.set(convertToJsonStream(table,out,charset,logger,tabName));                                             
                                        }catch (IOException e) {
                                            logger.error("IOException when writing output " , e);
                                        } catch (InterruptedException e) {
                                            logger.error("InterruptedException when writing output " , e);
                                            e.printStackTrace();
                                        }
                                    }         
                                }); 
                                
                                // set attribute how many rows were selected
                                flowFile = session.putAttribute(flowFile, RESULT_ROW_COUNT, String.valueOf(nrOfRows.get())); 
                                
                                // set mime.type based on output format
                                flowFile = session.putAttribute(flowFile, CoreAttributes.MIME_TYPE.key(),"application/json");        
                                  
                                session.getProvenanceReporter().modifyContent(flowFile, "Received " + nrOfRows.get() + " rows");
                                
                                session.transfer(flowFile, REL_SUCCESS);
                                 
                                session.commit();
                                
                                }    
                            }
                    }
                    public void errorReceived( final QErrorMessage message ) {
                        logger.error("Received error message:" + Utils.resultToString(message.getCause()));                   
                    }                          
                };         
                
                //Open a handle to q process
                callbackCon.addMessagesListener(listener);                
                // subscribe to tick
                final Object response = callbackCon.sync(SUB_TICKER, tabName , ""); 
                //logger.info("#Debug4---- subscribe to the table of: "+ context.getProperty(TABLE_NAME).getValue());
                // activate messageListener
                callbackCon.startListener();
                              
            }catch (QException e) {
                logger.error("QException when subscribing" , e);
            } catch (IOException e) {
                logger.error("IOException when subscribing" , e);
                // TODO Auto-generated catch block
                e.printStackTrace();
            }catch(Exception e){
                logger.error("Some Exception happened" , e);
                e.printStackTrace();
            }
        }

        context.yield();
    }
    public static long convertToJsonStream(final QTable table,final OutputStream outStream, 
            final Charset charset,ComponentLog logger,String tabName) throws IOException, InterruptedException{
        long nrOfRows = 0;
        
        String[] columnNames = table.getColumns();
        try {
            // Write the initial object brace
            outStream.write(("{\""+ tabName +"\":[").getBytes(charset));
            for ( final QTable.Row row : table ) {              
                if (nrOfRows != 0) {
                    outStream.write(",".getBytes(charset));
                }
                outStream.write("{".getBytes(charset));
                for(int i = 0; i < columnNames.length; i++){
                    
                    final String colName = columnNames[i];
                    logger.info("#Debug103---- colName is " + colName);
                    if (i != 0) {
                        outStream.write(",".getBytes(charset));
                    }
                    if (row.get(i) == null) {
                        outStream.write(("\"" + colName + "\"" + ":null").getBytes(charset));
                    }else{
                        //The reason to do so is because we can not query tickplant for the type info when dealing with In-Cloumn List
                        //TODO Add a processor property to identify the list-type only once
                        String valueString = null;
                        if (row.get(i) instanceof String || row.get(i) instanceof QTimestamp ||
                                row.get(i) instanceof QTimespan || row.get(i) instanceof QDateTime
                                ) {
                            logger.info("#Debug104---- ");
                            valueString = "\"" + row.get(i).toString() + "\"";
                        }
                        if(row.get(i) instanceof Double || row.get(i) instanceof Integer || row.get(i) instanceof Boolean || row.get(i) instanceof Long){
                            if(row.get(i) == null){
                                valueString = null;
                            }else{
                                valueString =  row.get(i).toString();
                            }                          
                        }
                        if (row.get(i) instanceof char[]) {
                            if(row.get(i) == null){
                                valueString = null;
                            }else{
                                StringBuilder sb = new StringBuilder();
                                for(Character ch:(char[]) row.get(i)){
                                    sb.append(ch);
                                }
                                valueString = "\"" + sb.toString() + "\""; 
                            }

                        }
                        
                        // if(!row.get(i).getClass().isPrimitive()){
                        // logger.info("#Debug105---- ");
                        if (row.get(i) instanceof double[]) {
                            valueString = Arrays.toString((double[]) row.get(i));
                        }
                        if (row.get(i) instanceof String[]) {
                            valueString = convertList((String[]) row.get(i));
                        }
                        if (row.get(i) instanceof QTimespan[]) {
                            valueString = convertList((QTimespan[]) row.get(i));
                        }
                        if (row.get(i) instanceof QTimestamp[]) {
                            valueString = convertList((QTimestamp[]) row.get(i));
                        }
                        if (row.get(i) instanceof QDateTime[]) {
                            valueString = convertList((QDateTime[]) row.get(i));
                        }

                        if (row.get(i) instanceof int[]) {
                            valueString = Arrays.toString((int[]) row.get(i));
                        }
                        if (row.get(i) instanceof boolean[]) {
                            valueString = Arrays.toString((boolean[]) row.get(i));
                        }

/*                        }else{
                            //Primitive type
                            valueString = ((Object)row.get(i)).toString();
                        }*/
                        outStream.write(("\"" + colName + "\":"
                                + valueString + "").getBytes(charset));
                    }
                }
                nrOfRows += 1;               
                outStream.write("}".getBytes(charset));
            }
        }catch(EOFException e){
            logger.error("In JSON converting Exception happened" , e);
            e.printStackTrace();
        }finally{

            outStream.write("]}".getBytes());
        }
        return nrOfRows;
    }
    
    public static boolean isRemoteFeederNotAlive(QCallbackConnection con , ComponentLog logger,ProcessContext context){       
        if(con == null){
            return false;
        }else{
            try {
                QBasicConnection q = openConnectionForTest(context);
                logger.info("---Debug010");
                q.close();
                return true;
            } catch (QException | IOException e) {
                logger.info("---CalcBack Connection is down, will restart the connection");
                try {
                    Thread.sleep(30000);
                } catch (InterruptedException e1) {
                    // TODO Auto-generated catch block
                    e1.printStackTrace();
                }
                // TODO Auto-generated catch block
                return false;
            } 
        }
    }
    
    
    public static String convertList(Object[] arr){
        String res = null;
        boolean first = true;
        StringBuilder sb = new StringBuilder("[");                        
        for(int j=0;j<arr.length;j++){
            if (!first) {
                sb.append(",");
            }
            sb.append(arr[j].toString());
            first = false;
        }
        sb.append("]");
        res = sb.toString();
        return res;
    }

}

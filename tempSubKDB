package Yan.processors.kdbversion;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import org.apache.nifi.annotation.behavior.EventDriven;
import org.apache.nifi.annotation.behavior.InputRequirement;
import org.apache.nifi.annotation.behavior.InputRequirement.Requirement;
import org.apache.nifi.annotation.documentation.CapabilityDescription;
import org.apache.nifi.annotation.documentation.Tags;
import org.apache.nifi.annotation.lifecycle.OnScheduled;
import org.apache.nifi.components.PropertyDescriptor;
import org.apache.nifi.processor.ProcessContext;
import org.apache.nifi.processor.ProcessSession;
import org.apache.nifi.processor.Relationship;
import org.apache.nifi.processor.exception.ProcessException;
import org.apache.nifi.processor.util.StandardValidators;

import com.exxeleron.qjava.QCallbackConnection;

@EventDriven
@Tags({"kdb","subsribe"})
@InputRequirement(Requirement.INPUT_REQUIRED)
@CapabilityDescription("Subsribe to KDB specific port. "
        + " "
        + " "
)

public class SubKDBProcessor  extends AbstractKDBProcessor {
    public static final String SUB_TICKER = ".u.sub";

    public static final PropertyDescriptor TABLE_NAME = new PropertyDescriptor.Builder()
    .name("table name")
    .description("The table's name to subcribe data")
    .addValidator(StandardValidators.NON_EMPTY_VALIDATOR)
    .required(true)
    .build();
    
    static final Relationship REL_SUCCESS = new Relationship.Builder().name("success")
            .description("All well received KDB messagess is routed here").build();
    static final Relationship REL_FAILURE = new Relationship.Builder().name("failure")
            .description("All input flowfiles that are part of a failed query execution go here").build();
    
    private final static List<PropertyDescriptor> propertyDescriptors;
    private final static Set<Relationship> relationships;
    
    static {
        List<PropertyDescriptor> _propertyDescriptors = new ArrayList<>();
        _propertyDescriptors.addAll(descriptors);
        _propertyDescriptors.add(TABLE_NAME);
        propertyDescriptors = Collections.unmodifiableList(_propertyDescriptors);
        Set<Relationship> _relationships = new HashSet<>();
        _relationships.add(REL_SUCCESS);
        _relationships.add(REL_FAILURE);
        relationships = Collections.unmodifiableSet(_relationships);
    }

    @Override
    public Set<Relationship> getRelationships() {
        return relationships;
    }

    @Override
    public final List<PropertyDescriptor> getSupportedPropertyDescriptors() {
        return propertyDescriptors;
    }

    

    @OnScheduled
    public void onScheduled(final ProcessContext context) {

    }
    
    public void onTrigger(final ProcessContext context, final ProcessSession session) throws ProcessException {
        final QCallbackConnection q = new QCallbackConnection("localhost", 17010, "", "");
    }
}
